version: '3'
services:
  # API service
  api:
    image: faye1225/takin-dify-api:0.0.3
    restart: always
    environment:
      - MODE=api
      - LOG_LEVEL=${LOG_LEVEL}
      - SECRET_KEY=${SECRET_KEY}
      - CONSOLE_WEB_URL=${CONSOLE_WEB_URL}
      - INIT_PASSWORD=${INIT_PASSWORD}
      - CONSOLE_API_URL=${CONSOLE_API_URL}
      - SERVICE_API_URL=${SERVICE_API_URL}
      - APP_WEB_URL=${APP_WEB_URL}
      - FILES_URL=${FILES_URL}
      - FILES_ACCESS_TIMEOUT=${FILES_ACCESS_TIMEOUT}
      - MIGRATION_ENABLED=${MIGRATION_ENABLED}

      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}

      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USE_SSL=${REDIS_USE_SSL}
      - REDIS_DB=${REDIS_DB}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}

      - WEB_API_CORS_ALLOW_ORIGINS=${WEB_API_CORS_ALLOW_ORIGINS}
      - CONSOLE_CORS_ALLOW_ORIGINS=${CONSOLE_CORS_ALLOW_ORIGINS}

      - STORAGE_TYPE=${STORAGE_TYPE}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}

      - VECTOR_STORE=${VECTOR_STORE}
      - WEAVIATE_ENDPOINT=${WEAVIATE_ENDPOINT}
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}

      - MAIL_TYPE=${MAIL_TYPE}
      - MAIL_DEFAULT_SEND_FROM=${MAIL_DEFAULT_SEND_FROM}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS}

      - CODE_EXECUTION_ENDPOINT=${CODE_EXECUTION_ENDPOINT}
      - CODE_EXECUTION_API_KEY=${CODE_EXECUTION_API_KEY}
      - CODE_MAX_NUMBER=${CODE_MAX_NUMBER}
      - CODE_MIN_NUMBER=${CODE_MIN_NUMBER}
      - CODE_MAX_STRING_LENGTH=${CODE_MAX_STRING_LENGTH}
      - TEMPLATE_TRANSFORM_MAX_LENGTH=${TEMPLATE_TRANSFORM_MAX_LENGTH}
      - CODE_MAX_STRING_ARRAY_LENGTH=${CODE_MAX_STRING_ARRAY_LENGTH}
      - CODE_MAX_OBJECT_ARRAY_LENGTH=${CODE_MAX_OBJECT_ARRAY_LENGTH}
      - CODE_MAX_NUMBER_ARRAY_LENGTH=${CODE_MAX_NUMBER_ARRAY_LENGTH}

      - SSRF_PROXY_HTTP_URL=${SSRF_PROXY_HTTP_URL}
      - SSRF_PROXY_HTTPS_URL=${SSRF_PROXY_HTTPS_URL}

      - INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH=${INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH}

    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    # uncomment to expose dify-api port to host
    ports:
      - "5001:5001"
    networks:
      - ssrf_proxy_network
      - default

  # worker service
  # The Celery worker for processing the queue.
  worker:
    image: faye1225/takin-dify-api:0.0.3
    restart: always
    environment:
      - MODE=worker
      - LOG_LEVEL=${LOG_LEVEL}
      - SECRET_KEY=${SECRET_KEY}
      - CONSOLE_WEB_URL=${CONSOLE_WEB_URL}
      - INIT_PASSWORD=${INIT_PASSWORD}
      - CONSOLE_API_URL=${CONSOLE_API_URL}
      - SERVICE_API_URL=${SERVICE_API_URL}
      - APP_WEB_URL=${APP_WEB_URL}
      - FILES_URL=${FILES_URL}
      - FILES_ACCESS_TIMEOUT=${FILES_ACCESS_TIMEOUT}
      - MIGRATION_ENABLED=${MIGRATION_ENABLED}

      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}

      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USE_SSL=${REDIS_USE_SSL}
      - REDIS_DB=${REDIS_DB}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}

      - WEB_API_CORS_ALLOW_ORIGINS=${WEB_API_CORS_ALLOW_ORIGINS}
      - CONSOLE_CORS_ALLOW_ORIGINS=${CONSOLE_CORS_ALLOW_ORIGINS}

      - STORAGE_TYPE=${STORAGE_TYPE}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_REGION=${S3_REGION}

      - VECTOR_STORE=${VECTOR_STORE}
      - WEAVIATE_ENDPOINT=${WEAVIATE_ENDPOINT}
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}

      - MAIL_TYPE=${MAIL_TYPE}
      - MAIL_DEFAULT_SEND_FROM=${MAIL_DEFAULT_SEND_FROM}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS}

      - CODE_EXECUTION_ENDPOINT=${CODE_EXECUTION_ENDPOINT}
      - CODE_EXECUTION_API_KEY=${CODE_EXECUTION_API_KEY}
      - CODE_MAX_NUMBER=${CODE_MAX_NUMBER}
      - CODE_MIN_NUMBER=${CODE_MIN_NUMBER}
      - CODE_MAX_STRING_LENGTH=${CODE_MAX_STRING_LENGTH}
      - TEMPLATE_TRANSFORM_MAX_LENGTH=${TEMPLATE_TRANSFORM_MAX_LENGTH}
      - CODE_MAX_STRING_ARRAY_LENGTH=${CODE_MAX_STRING_ARRAY_LENGTH}
      - CODE_MAX_OBJECT_ARRAY_LENGTH=${CODE_MAX_OBJECT_ARRAY_LENGTH}
      - CODE_MAX_NUMBER_ARRAY_LENGTH=${CODE_MAX_NUMBER_ARRAY_LENGTH}

      - SSRF_PROXY_HTTP_URL=${SSRF_PROXY_HTTP_URL}
      - SSRF_PROXY_HTTPS_URL=${SSRF_PROXY_HTTPS_URL}

      - INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH=${INDEXING_MAX_SEGMENTATION_TOKENS_LENGTH}
    depends_on:
      - db
      - redis
    volumes:
      # Mount the storage directory to the container, for storing user files.
      - ./volumes/app/storage:/app/api/storage
    networks:
      - ssrf_proxy_network
      - default

  # Frontend web application.
  web:
    image: faye1225/takin-dify-web:0.0.3
    restart: always
    environment:
      - CONSOLE_API_URL=${CONSOLE_API_URL}
      - APP_API_URL=${APP_API_URL}

    # uncomment to expose dify-web port to host
  #    ports:
#      - "3000:3000"


  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    volumes:
      # Mount the redis data directory to the container.
      - ./volumes/redis/data:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass difyai123456
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    # uncomment to expose redis port to host
    # ports:
    #   - "6379:6379"

  # The Weaviate vector store.
  weaviate:
    image: semitechnologies/weaviate:1.19.0
    restart: always
    volumes:
      # Mount the Weaviate data directory to the container.
      - ./volumes/weaviate:/var/lib/weaviate
    environment:
      # The Weaviate configurations
      # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars) documentation for more information.
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: 'WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih'
      AUTHENTICATION_APIKEY_USERS: 'hello@dify.ai'
      AUTHORIZATION_ADMINLIST_ENABLED: 'true'
      AUTHORIZATION_ADMINLIST_USERS: 'hello@dify.ai'
    # uncomment to expose weaviate port to host
    # ports:
    #  - "8080:8080"

  # The DifySandbox
  sandbox:
    image: langgenius/dify-sandbox:0.2.0
    restart: always
    environment:
      # The DifySandbox configurations
      # Make sure you are changing this key for your deployment with a strong key.
      # You can generate a strong key using `openssl rand -base64 42`.
      API_KEY: dify-sandbox
      GIN_MODE: 'release'
      WORKER_TIMEOUT: 15
      ENABLE_NETWORK: 'true'
      HTTP_PROXY: 'http://ssrf_proxy:3128'
      HTTPS_PROXY: 'http://ssrf_proxy:3128'
    volumes:
      - ./volumes/sandbox/dependencies:/dependencies
    networks:
      - ssrf_proxy_network

  # ssrf_proxy server
  # for more information, please refer to
  # https://docs.dify.ai/getting-started/install-self-hosted/install-faq#id-16.-why-is-ssrf_proxy-needed
  ssrf_proxy:
    image: ubuntu/squid:latest
    restart: always
    volumes:
      # pls clearly modify the squid.conf file to fit your network environment.
      - ./volumes/ssrf_proxy/squid.conf:/etc/squid/squid.conf
    networks:
      - ssrf_proxy_network
      - default
  # Qdrant vector store.
  # uncomment to use qdrant as vector store.
  # (if uncommented, you need to comment out the weaviate service above,
  # and set VECTOR_STORE to qdrant in the api & worker service.)
  # qdrant:
  #   image: langgenius/qdrant:v1.7.3
  #   restart: always
  #   volumes:
  #     - ./volumes/qdrant:/qdrant/storage
  #   environment:
  #     QDRANT_API_KEY: 'difyai123456'
  #   # uncomment to expose qdrant port to host
  #   # ports:
  #   #  - "6333:6333"
  #   #  - "6334:6334"

  # The pgvector vector database.
  # Uncomment to use qdrant as vector store.
  # pgvector:
  #   image: pgvector/pgvector:pg16
  #   restart: always
  #   environment:
  #     PGUSER: postgres
  #     # The password for the default postgres user.
  #     POSTGRES_PASSWORD: difyai123456
  #     # The name of the default postgres database.
  #     POSTGRES_DB: dify
  #     # postgres data directory
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #   volumes:
  #     - ./volumes/pgvector/data:/var/lib/postgresql/data
  #   # uncomment to expose db(postgresql) port to host
  #   # ports:
  #   #   - "5433:5432"
  #   healthcheck:
  #     test: [ "CMD", "pg_isready" ]
  #     interval: 1s
  #     timeout: 3s
  #     retries: 30


  # The nginx reverse proxy.
  # used for reverse proxying the API service and Web service.
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/ssl
    depends_on:
      - api
      - web
    ports:
      - "80:80"
      - "443:443"
networks:
  # create a network between sandbox, api and ssrf_proxy, and can not access outside.
  ssrf_proxy_network:
    driver: bridge
    internal: true
